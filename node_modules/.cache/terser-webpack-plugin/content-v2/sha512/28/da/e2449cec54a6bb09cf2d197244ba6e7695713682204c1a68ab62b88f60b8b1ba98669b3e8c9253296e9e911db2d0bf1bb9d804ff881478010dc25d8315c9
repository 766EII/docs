{"code":"(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{423:function(s,t,e){\"use strict\";e.r(t);var a=e(61),n=Object(a.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e(\"ContentSlotsDistributor\",{attrs:{\"slot-key\":s.$parent.slotKey}},[e(\"h2\",{attrs:{id:\"前言\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#前言\"}},[s._v(\"#\")]),s._v(\" 前言\")]),s._v(\" \"),e(\"p\",[s._v(\"文中内容只是冰山一角，后面学多了就慢慢加上去\")]),s._v(\" \"),e(\"hr\"),s._v(\" \"),e(\"h2\",{attrs:{id:\"区分git和github\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#区分git和github\"}},[s._v(\"#\")]),s._v(\" 区分Git和GitHub\")]),s._v(\" \"),e(\"blockquote\",[e(\"p\",[s._v(\"首先先明确Git和GitHub的区别\")]),s._v(\" \"),e(\"blockquote\",[e(\"p\",[s._v(\"Git: 一个\"),e(\"strong\",[s._v(\"分布式版本控制系统\")]),s._v(\"，说白了就是一个软件\")]),s._v(\" \"),e(\"p\",[s._v(\"GitHub: 一个放代码的网站，说白了就是一个\"),e(\"strong\",[s._v(\"放代码的仓库\")])]),s._v(\" \"),e(\"blockquote\",[e(\"p\",[s._v(\"这里推荐使用 Gitee（码云）,因为国内运行GitHub网速很慢\")])])])]),s._v(\" \"),e(\"hr\"),s._v(\" \"),e(\"h2\",{attrs:{id:\"git安装\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#git安装\"}},[s._v(\"#\")]),s._v(\" Git安装\")]),s._v(\" \"),e(\"blockquote\",[e(\"p\",[s._v(\"前往Git官网下载---安装（略）\")]),s._v(\" \"),e(\"blockquote\",[e(\"p\",[s._v(\"当我们安装好后,鼠标放再桌面,右键 会出现 Git GUi 和\"),e(\"strong\",[s._v(\"Git Bash\")]),s._v(\"这两个选项就算成功\")]),s._v(\" \"),e(\"blockquote\",[e(\"p\",[s._v(\"Git GUi: 可以理解为Git的图形化管理工具(个人认为没啥用)\")]),s._v(\" \"),e(\"p\",[s._v(\"Git Bash: Git提供命令行工具，就是写\"),e(\"strong\",[s._v(\"Git命令\")]),s._v(\"的工具\")])])])]),s._v(\" \"),e(\"hr\"),s._v(\" \"),e(\"h2\",{attrs:{id:\"git配置\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#git配置\"}},[s._v(\"#\")]),s._v(\" Git配置\")]),s._v(\" \"),e(\"blockquote\",[e(\"p\",[s._v(\"打开GIt Bash 然后配置用户信息\")])]),s._v(\" \"),e(\"div\",{staticClass:\"language-git line-numbers-mode\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-git\"}},[e(\"code\",[s._v(\"git config --global user.name \"),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v(\"'chen-weibiao'\")]),s._v(\"\\ngit config --global user.email \"),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v(\"'766410141@qq.com'\")]),s._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token deleted\"}},[s._v(\"--- 用户名和邮箱你在注册Gitee的时候都清楚了解的\")]),s._v(\"\\n\")])]),s._v(\" \"),e(\"div\",{staticClass:\"line-numbers-wrapper\"},[e(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),e(\"br\")])]),e(\"div\",{staticClass:\"custom-block tip\"},[e(\"p\",{staticClass:\"custom-block-title\"},[s._v(\"一劳不一定永逸\")]),s._v(\" \"),e(\"p\",[s._v(\"这里只需要配置一次就足够了,以后你换了新电脑重新安装Git还得继续配置一次\")])]),s._v(\" \"),e(\"hr\"),s._v(\" \"),e(\"h2\",{attrs:{id:\"原理\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#原理\"}},[s._v(\"#\")]),s._v(\" 原理\")]),s._v(\" \"),e(\"blockquote\",[e(\"p\",[s._v(\"先了解下有3个东西 \"),e(\"strong\",[s._v(\"工作区\")]),s._v(\" \"),e(\"strong\",[s._v(\"暂存区\")]),s._v(\" \"),e(\"strong\",[s._v(\"Git仓库\")])]),s._v(\" \"),e(\"blockquote\",[e(\"p\",[s._v(\"工作区: 就是我们添加、编辑、修改代码的地方\")]),s._v(\" \"),e(\"p\",[s._v(\"暂存区: 就是我们在本地写好代码后把代码提交到暂存区,可以理解为暂存区就在本地电脑上(为啥需要暂存区:就相当于机场的仓库为啥需要为啥不直接搬到飞机上去就是因为我们可以还要对这些物品进行一些底层操作和处理防止出错)\")]),s._v(\" \"),e(\"p\",[s._v(\"Git仓库: 就是我们Gitee上的仓库,从暂存区提交上去(理解为上文的飞机)\")]),s._v(\" \"),e(\"blockquote\",[e(\"p\",[s._v(\"所以总得来讲就是说我们在工作区写好代码,然后放到暂存区，暂存区底层自己处理一些操作和处理我们管不着也弄不懂，然后在提交到Git仓库\")]),s._v(\" \"),e(\"p\",[s._v(\"工作区---\\x3e暂存区---\\x3eGit仓库\")])])])]),s._v(\" \"),e(\"div\",{staticClass:\"custom-block tip\"},[e(\"p\",{staticClass:\"custom-block-title\"},[s._v(\"慢慢来\")]),s._v(\" \"),e(\"p\",[s._v(\"上面这三个玩意按我说的通俗理解就行、先有个印象就行，等后面再回来看，就会好理解很多\")])]),s._v(\" \"),e(\"hr\"),s._v(\" \"),e(\"h2\",{attrs:{id:\"本地仓库\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#本地仓库\"}},[s._v(\"#\")]),s._v(\" 本地仓库\")]),s._v(\" \"),e(\"blockquote\",[e(\"p\",[s._v(\"他的作用是讲你的代码先放在里面\")]),s._v(\" \"),e(\"blockquote\",[e(\"p\",[s._v(\"在你的项目里打开 Git Bash 输入下面命令, 输入完后你的项目里会多出一个\"),e(\"strong\",[s._v(\"隐藏文件 .git\")])])])]),s._v(\" \"),e(\"div\",{staticClass:\"language-git line-numbers-mode\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-git\"}},[e(\"code\",[s._v(\"git init\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token deleted\"}},[s._v(\"---初始化仓库\")]),s._v(\"\\n\")])]),s._v(\" \"),e(\"div\",{staticClass:\"line-numbers-wrapper\"},[e(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),e(\"br\")])]),e(\"blockquote\",[e(\"p\",[s._v(\"当我们写好代码后想要提交的时候 输入下面命令(比较常用,得记住)\")])]),s._v(\" \"),e(\"div\",{staticClass:\"language-git line-numbers-mode\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-git\"}},[e(\"code\",[s._v(\"git status\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token deleted\"}},[s._v(\"--- 用来检查哪些代码被修改了，哪些是新增的代码(非必要)\")]),s._v(\"\\ngit add 文件名\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token deleted\"}},[s._v(\"--- 提交文件到暂存区 (下面为git add 的语法)\")]),s._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token deleted\"}},[s._v(\"--- git add 文件名1 文件名2 ...\")]),s._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token deleted\"}},[s._v(\"--- git add . (添加当前目录到暂存区)\")]),s._v(\"\\ngit commit -m\"),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"注释内容\"')]),s._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token deleted\"}},[s._v(\"--- 注释内容写上你第几次提交以及写了些啥做了些啥就行\")]),s._v(\"\\n\")])]),s._v(\" \"),e(\"div\",{staticClass:\"line-numbers-wrapper\"},[e(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),e(\"br\")])]),e(\"div\",{staticClass:\"custom-block tip\"},[e(\"p\",{staticClass:\"custom-block-title\"},[s._v(\"TIP\")]),s._v(\" \"),e(\"p\",[s._v(\"这里只是将代码提交到了本地仓库，可以理解为在工作区(个人理解哈)\")])]),s._v(\" \"),e(\"hr\"),s._v(\" \"),e(\"h2\",{attrs:{id:\"github创建远程仓库-这里用gitee演示\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#github创建远程仓库-这里用gitee演示\"}},[s._v(\"#\")]),s._v(\" GitHub创建远程仓库(这里用gitee演示)\")]),s._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[s._v(\"首先进入gitee个人主页，然后头像处，新建仓库,项目名自定义、对外公开、其他可以选择不填\")])]),s._v(\" \"),e(\"li\",[e(\"p\",[s._v(\"这里我们会注意到有两个协议，HTTP和SSH，我们这里先说 \"),e(\"strong\",[s._v(\"HTTP协议\")])])])]),s._v(\" \"),e(\"ol\",[e(\"li\",[s._v(\"当你已经把上面本地仓库的步骤做完后，就是已经把写好或者修改好的代码提交到\"),e(\"strong\",[s._v(\"暂存区\")]),s._v(\"后，就可以打开Git Bash 输入下面命令\")])]),s._v(\" \"),e(\"div\",{staticClass:\"language-git line-numbers-mode\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-git\"}},[e(\"code\",[s._v(\"git clone 线上仓库地址\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token deleted\"}},[s._v(\"--- 记住这里选择HTTP协议的仓库地址 那个SSH的待会再说\")]),s._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token deleted\"}},[s._v(\"--- 这一步可以理解为将你本地仓库与线上仓库的一个连接，一个通道\")]),s._v(\"\\n\")])]),s._v(\" \"),e(\"div\",{staticClass:\"line-numbers-wrapper\"},[e(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),e(\"br\")])]),e(\"ol\",{attrs:{start:\"2\"}},[e(\"li\",[s._v(\"既然本地仓库与线上仓库已经建立好通道后，就可以传输了，也就是把放在暂存区的代码推到线上仓库了，使用下面命令\")])]),s._v(\" \"),e(\"div\",{staticClass:\"language-git line-numbers-mode\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-git\"}},[e(\"code\",[s._v(\"git push -u origin \"),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"master\"')]),s._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token deleted\"}},[s._v(\"--- 第一次推代码会弹出一个框，验证你的用户名和密码的 第二次就直接使用 git push\")]),s._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token deleted\"}},[s._v(\"--- 这里的master是主分支的意思，什么是分支呐，待会再说，先对他有个印象\")]),s._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token deleted\"}},[s._v(\"--- push 推的意思\")]),s._v(\"\\n\")])]),s._v(\" \"),e(\"div\",{staticClass:\"line-numbers-wrapper\"},[e(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),e(\"br\")])]),e(\"ul\",[e(\"li\",[s._v(\"当你和你的朋友一起共用这个仓库的时候，他吧他的代码推了上去，你想要获取他的代码，也就是更新你本地仓库，使你本地仓库和线上仓库的代码保持一致，使用下面指令\")])]),s._v(\" \"),e(\"div\",{staticClass:\"language-git line-numbers-mode\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-git\"}},[e(\"code\",[s._v(\"git pull\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token deleted\"}},[s._v(\"--- pull 拉的意思\")]),s._v(\"\\n\")])]),s._v(\" \"),e(\"div\",{staticClass:\"line-numbers-wrapper\"},[e(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),e(\"br\")])]),e(\"blockquote\",[e(\"p\",[s._v(\"小结\")]),s._v(\" \"),e(\"blockquote\",[e(\"p\",[s._v(\"每天工作第一件事先 git pull 拉取线上仓库的最新版本\")]),s._v(\" \"),e(\"p\",[s._v(\"每天下班最后一件事要 git push 把你写的代码推上去\")])])]),s._v(\" \"),e(\"hr\"),s._v(\" \"),e(\"h2\",{attrs:{id:\"分支管理\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#分支管理\"}},[s._v(\"#\")]),s._v(\" 分支管理\")]),s._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[s._v(\"在版本回退那里，每次提交完后都会有记录，Git把他们串成时间线，形成类似于时间轴的东西，这个时间轴就是一个分支，我们称之为 master 分支\")])]),s._v(\" \"),e(\"li\",[e(\"p\",[s._v(\"在开发的时候往往是团队协作，多人进行开发，因此光有一个分支是无法满足多人同时开发的需求的,可以创建多个分支，且每个\"),e(\"strong\",[s._v(\"分支互不影响\")])])]),s._v(\" \"),e(\"li\",[e(\"p\",[s._v(\"分支简单理解就是一条分支就是一台电脑，比如你创建了一个分支，你就有2个分支了，你可以在A分支里写代码，你朋友可以在B分支写代码，当然你俩写的代码不可能是同一个页面的代码，他写他的功能，你写你的功能，最后合并 A 和 B 分支，你们两的代码也就能合并在一起了，然后在推上去\")])])]),s._v(\" \"),e(\"blockquote\",[e(\"p\",[s._v(\"创建分支\")])]),s._v(\" \"),e(\"div\",{staticClass:\"language-git line-numbers-mode\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-git\"}},[e(\"code\",[s._v(\"git branch 分支名\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token deleted\"}},[s._v(\"--- 这里分支名不要使用中文\")]),s._v(\"\\n\")])]),s._v(\" \"),e(\"div\",{staticClass:\"line-numbers-wrapper\"},[e(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),e(\"br\")])]),e(\"blockquote\",[e(\"p\",[s._v(\"查看分支\")])]),s._v(\" \"),e(\"div\",{staticClass:\"language-git line-numbers-mode\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-git\"}},[e(\"code\",[s._v(\"git branch\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token deleted\"}},[s._v(\"--- 可以看到你到创建的分支与 master 分支\")]),s._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token deleted\"}},[s._v(\"--- 哪个分支前面有一朵小花花,就表示你在当前分支\")]),s._v(\"\\n\")])]),s._v(\" \"),e(\"div\",{staticClass:\"line-numbers-wrapper\"},[e(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),e(\"br\")])]),e(\"blockquote\",[e(\"p\",[s._v(\"切换分支\")])]),s._v(\" \"),e(\"div\",{staticClass:\"language-git line-numbers-mode\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-git\"}},[e(\"code\",[s._v(\"git checkout 分支名\\n\")])]),s._v(\" \"),e(\"div\",{staticClass:\"line-numbers-wrapper\"},[e(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),e(\"br\")])]),e(\"blockquote\",[e(\"p\",[s._v(\"合并分支\")])]),s._v(\" \"),e(\"div\",{staticClass:\"language-git line-numbers-mode\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-git\"}},[e(\"code\",[s._v(\"git merge 被合并的分支名\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token deleted\"}},[s._v(\"--- 如果你当前在master分支 被合并的分支名就是 你刚创建的分支\")]),s._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token deleted\"}},[s._v(\"--- 当然你也可以这样写 把需要合并的分支名全写上去 注意是全\")]),s._v(\"\\ngit merge master 分支名1 ...\\n\")])]),s._v(\" \"),e(\"div\",{staticClass:\"line-numbers-wrapper\"},[e(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),e(\"br\")])]),e(\"blockquote\",[e(\"p\",[s._v(\"删除分支\")])]),s._v(\" \"),e(\"div\",{staticClass:\"language-git line-numbers-mode\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-git\"}},[e(\"code\",[s._v(\"git branch -d 分支名\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token deleted\"}},[s._v(\"--- 这里要注意 删除分支的时候一定要退出要删除的分支\")]),s._v(\"\\n\")])]),s._v(\" \"),e(\"div\",{staticClass:\"line-numbers-wrapper\"},[e(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),e(\"br\")])]),e(\"blockquote\",[e(\"p\",[s._v(\"分支之间相互不影响 ：就是我们创建了一个 dev 分支 然后切换到 dev分支 然后在该分支 修改内容 然后提交到本地仓库 然后dev分支下的内容就会改变；现在我们切换回master分支，在去查看之前在dev下修改的代码内容，发现没有改变，这就是分支之间互相不影响。当我们所有事情做好后就可以合并分支；若需要推到到线上 则 git push\")])]),s._v(\" \"),e(\"hr\"),s._v(\" \"),e(\"h2\",{attrs:{id:\"时光穿梭机-版本回退\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#时光穿梭机-版本回退\"}},[s._v(\"#\")]),s._v(\" 时光穿梭机--版本回退\")]),s._v(\" \"),e(\"blockquote\",[e(\"p\",[s._v(\"这个功能也是为啥Git会被发明出来的原因\")]),s._v(\" \"),e(\"blockquote\",[e(\"p\",[s._v(\"试想当你写了好几个方案的代码后，你的甲方突然说还是第一个方案好，这个时候你又没有备案，如何才能找回第一个版本的代码；这个功能就是为了应付类似情况出现的\")])])]),s._v(\" \"),e(\"p\",[s._v(\"步骤\")]),s._v(\" \"),e(\"ul\",[e(\"li\",[s._v(\"查看版本，确定需要回到的时刻点,得到版本号 \"),e(\"strong\",[s._v(\"commit id\")])])]),s._v(\" \"),e(\"div\",{staticClass:\"language-git line-numbers-mode\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-git\"}},[e(\"code\",[s._v(\"git log\\ngit log --pretty=oneline \\n\"),e(\"span\",{pre:!0,attrs:{class:\"token deleted\"}},[s._v(\"--- 两种都是查看日志,推荐使用第二种\")]),s._v(\"\\n\")])]),s._v(\" \"),e(\"div\",{staticClass:\"line-numbers-wrapper\"},[e(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),e(\"br\")])]),e(\"ul\",[e(\"li\",[s._v(\"回退版本\")])]),s._v(\" \"),e(\"div\",{staticClass:\"language-git line-numbers-mode\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-git\"}},[e(\"code\",[s._v(\"git reset --hard 版本号\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token deleted\"}},[s._v(\"--- 查完日志会出现版本号，输入你想回到的那个版本的版本号\")]),s._v(\"\\n\")])]),s._v(\" \"),e(\"div\",{staticClass:\"line-numbers-wrapper\"},[e(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),e(\"br\")])]),e(\"p\",[s._v(\"若你回到了之前的版本，现在你想要回到最新的版本的时候，使用下面指令可以查看历史操作以得到最新的commit id\")]),s._v(\" \"),e(\"div\",{staticClass:\"language-git line-numbers-mode\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-git\"}},[e(\"code\",[s._v(\"git reflog\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token deleted\"}},[s._v(\"--- 查看历史 commit id\")]),s._v(\"\\n\")])]),s._v(\" \"),e(\"div\",{staticClass:\"line-numbers-wrapper\"},[e(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),e(\"br\")])]),e(\"p\",[s._v(\"小结:\")]),s._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[s._v(\"想要回到过去，必须得到commit id，然后通过 \"),e(\"strong\",[s._v(\"git reset --hard\")]),s._v(\" 版本号 进行回退\")])]),s._v(\" \"),e(\"li\",[e(\"p\",[s._v(\"想要回到未来，则需要 \"),e(\"strong\",[s._v(\"git reflog\")]),s._v(\" 进行历史操作查看，得到最新的commit id\")])]),s._v(\" \"),e(\"li\",[e(\"p\",[s._v(\"再写回退指令的时候 commit id 可以不用写全，git自动识别，但是也不能写太少，至少需要写前4位字符\")])])]),s._v(\" \"),e(\"hr\"),s._v(\" \"),e(\"h2\",{attrs:{id:\"过滤文件\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#过滤文件\"}},[s._v(\"#\")]),s._v(\" 过滤文件\")]),s._v(\" \"),e(\"blockquote\",[e(\"p\",[s._v(\"就是我们本地仓库有些文件太大了，不应该推送上去，选择过滤掉，这样我们在推送的时候就会忽略这个文件，而推送其他没被忽略的文件\")]),s._v(\" \"),e(\"blockquote\",[e(\"p\",[s._v(\"比如我们熟知的node_modules 它里面包含了一些node第三方包，文件很大，我们一般不选择推送上去，而是将它过滤掉\")])])]),s._v(\" \"),e(\"ul\",[e(\"li\",[e(\"p\",[s._v(\"过滤文件需要新建一个名为 .gitignore ，该文件用于生命忽略文件或不忽略文件的规则，规则对当前目录及其子目录生效\")])]),s._v(\" \"),e(\"li\",[e(\"p\",[s._v(\"打开项目根目录，一般在根目录创建，然后打开Git Bash，输入下面命令\")])])]),s._v(\" \"),e(\"div\",{staticClass:\"language-git line-numbers-mode\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-git\"}},[e(\"code\",[s._v(\"mkdir .gitignore \\ntouch .gitignore\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token deleted\"}},[s._v(\"--- 第一个不行用第二个\")]),s._v(\"\\n\")])]),s._v(\" \"),e(\"div\",{staticClass:\"line-numbers-wrapper\"},[e(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),e(\"br\")])]),e(\"ul\",[e(\"li\",[s._v(\"规则\")])]),s._v(\" \"),e(\"div\",{staticClass:\"language-git line-numbers-mode\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-git\"}},[e(\"code\",[s._v(\"/mtk/ 过滤整个文件\\n\\n*.zip 过滤所有.zip文件\\n\\n/mtk/do.c 过滤某个具体文件夹\\n\\n!index.html \\n\"),e(\"span\",{pre:!0,attrs:{class:\"token deleted\"}},[s._v(\"--- 不过滤该文件 前面的是 ！\")]),s._v(\"\\n\")])]),s._v(\" \"),e(\"div\",{staticClass:\"line-numbers-wrapper\"},[e(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"6\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"7\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"8\")]),e(\"br\")])]),e(\"div\",{staticClass:\"custom-block danger\"},[e(\"p\",{staticClass:\"custom-block-title\"},[s._v(\"注意注意\")]),s._v(\" \"),e(\"p\",[s._v(\"需要强调的一点，如果你不慎在创建 .gitignore文件之前就push了项目，那么即使你在.gitignore文件中写入新的过滤规则，这些规则也不会起作用，Git仍然会对所有文件进行版本管理。所以我们今后我们得养成一个好习惯，项目创建的时候，就创建,gitignore文件，过滤某些不需要push的文件\")])]),s._v(\" \"),e(\"hr\"),s._v(\" \"),e(\"h2\",{attrs:{id:\"总结\"}},[e(\"a\",{staticClass:\"header-anchor\",attrs:{href:\"#总结\"}},[s._v(\"#\")]),s._v(\" 总结\")]),s._v(\" \"),e(\"blockquote\",[e(\"p\",[s._v(\"在gitee创建一个新的仓库；然后打开你的项目 启动 GIt Bash，先\"),e(\"strong\",[s._v(\"仓库初始化\")]),s._v(\" 接着我们创建 .gitignore 文件过滤掉你项目里不需要push的文件\")])]),s._v(\" \"),e(\"div\",{staticClass:\"language-git line-numbers-mode\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-git\"}},[e(\"code\",[s._v(\"git init\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token deleted\"}},[s._v(\"--- 在本地生成 .git 隐藏文件 \")]),s._v(\"\\n\")])]),s._v(\" \"),e(\"div\",{staticClass:\"line-numbers-wrapper\"},[e(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),e(\"br\")])]),e(\"blockquote\",[e(\"p\",[s._v(\"我们创建一个dev分支，切换到dev分支，在该分支上写你的代码和修改内容；\")])]),s._v(\" \"),e(\"div\",{staticClass:\"language-git line-numbers-mode\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-git\"}},[e(\"code\",[s._v(\"git branch dev --- 创建分支\\ngit checkout dev --- 切换分支\\ngit checkout -b dev --- 创建并切换到该分支\\n\")])]),s._v(\" \"),e(\"div\",{staticClass:\"line-numbers-wrapper\"},[e(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),e(\"br\")])]),e(\"blockquote\",[e(\"p\",[s._v(\"当你在dev分支下开发完了，现在我们先放进暂存区\")])]),s._v(\" \"),e(\"div\",{staticClass:\"language-git line-numbers-mode\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-git\"}},[e(\"code\",[s._v(\"git add .\\ngit commit -m\"),e(\"span\",{pre:!0,attrs:{class:\"token string\"}},[s._v('\"注释\"')]),s._v(\"\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token deleted\"}},[s._v(\"--- 这两步将代码推到暂存区\")]),s._v(\"\\ngit clone 线上仓库地址\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token deleted\"}},[s._v(\"--- 这一步将本地仓库与线上仓库建立通道\")]),s._v(\"\\n\")])]),s._v(\" \"),e(\"div\",{staticClass:\"line-numbers-wrapper\"},[e(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"3\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"4\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"5\")]),e(\"br\")])]),e(\"blockquote\",[e(\"p\",[s._v(\"因为我们只在本地创立了dev分支，而线上仓库那边没有dev分支，我们得在线上创造dev分支\")])]),s._v(\" \"),e(\"div\",{staticClass:\"language-git line-numbers-mode\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-git\"}},[e(\"code\",[s._v(\"git push -u origin dev\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token deleted\"}},[s._v(\"--- 把本地dev分支 推送到线上\")]),s._v(\"\\n\")])]),s._v(\" \"),e(\"div\",{staticClass:\"line-numbers-wrapper\"},[e(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),e(\"br\")])]),e(\"blockquote\",[e(\"p\",[s._v(\"现在我们切换回 主分支 master 然后在合并主分支和dev分支\")])]),s._v(\" \"),e(\"div\",{staticClass:\"language-git line-numbers-mode\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-git\"}},[e(\"code\",[s._v(\"git checkout master --- 切换回主分支\\ngit merge dev  --- 合并dev分支\\n\")])]),s._v(\" \"),e(\"div\",{staticClass:\"line-numbers-wrapper\"},[e(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),e(\"br\")])]),e(\"div\",{staticClass:\"custom-block tip\"},[e(\"p\",{staticClass:\"custom-block-title\"},[s._v(\"TIP\")]),s._v(\" \"),e(\"p\",[s._v(\"这里合并分支都是在本地完成的，线上那边的分支还没合并，所以我们得把合并的主分支push到仓库\")])]),s._v(\" \"),e(\"div\",{staticClass:\"language-git line-numbers-mode\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-git\"}},[e(\"code\",[s._v(\"git push\\n\"),e(\"span\",{pre:!0,attrs:{class:\"token deleted\"}},[s._v(\"--- push完后再去线上仓库查看就会看到仓库时间是最新的了\")]),s._v(\"\\n\")])]),s._v(\" \"),e(\"div\",{staticClass:\"line-numbers-wrapper\"},[e(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),e(\"br\")])]),e(\"blockquote\",[e(\"p\",[s._v(\"最后我们在删除本地dev分支，注意得看看是不是不在dev分支上\")])]),s._v(\" \"),e(\"div\",{staticClass:\"language-git line-numbers-mode\"},[e(\"pre\",{pre:!0,attrs:{class:\"language-git\"}},[e(\"code\",[s._v(\"git branch --- 查看当前在哪个分支上\\ngit branch -d dev --- 删除dev分支\\n\")])]),s._v(\" \"),e(\"div\",{staticClass:\"line-numbers-wrapper\"},[e(\"span\",{staticClass:\"line-number\"},[s._v(\"1\")]),e(\"br\"),e(\"span\",{staticClass:\"line-number\"},[s._v(\"2\")]),e(\"br\")])]),e(\"hr\"),s._v(\" \"),e(\"p\",[s._v(\"感谢看完！！！撒花撒花✿✿ヽ(°▽°)ノ✿\")])])}),[],!1,null,null,null);t.default=n.exports}}]);","extractedComments":[]}